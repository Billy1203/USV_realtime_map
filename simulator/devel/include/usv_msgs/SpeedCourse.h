// Generated by gencpp from file usv_msgs/SpeedCourse.msg
// DO NOT EDIT!


#ifndef USV_MSGS_MESSAGE_SPEEDCOURSE_H
#define USV_MSGS_MESSAGE_SPEEDCOURSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace usv_msgs
{
template <class ContainerAllocator>
struct SpeedCourse_
{
  typedef SpeedCourse_<ContainerAllocator> Type;

  SpeedCourse_()
    : speed(0.0)
    , course(0.0)  {
    }
  SpeedCourse_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , course(0.0)  {
  (void)_alloc;
    }



   typedef double _speed_type;
  _speed_type speed;

   typedef double _course_type;
  _course_type course;





  typedef boost::shared_ptr< ::usv_msgs::SpeedCourse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::usv_msgs::SpeedCourse_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedCourse_

typedef ::usv_msgs::SpeedCourse_<std::allocator<void> > SpeedCourse;

typedef boost::shared_ptr< ::usv_msgs::SpeedCourse > SpeedCoursePtr;
typedef boost::shared_ptr< ::usv_msgs::SpeedCourse const> SpeedCourseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::usv_msgs::SpeedCourse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::usv_msgs::SpeedCourse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::usv_msgs::SpeedCourse_<ContainerAllocator1> & lhs, const ::usv_msgs::SpeedCourse_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.course == rhs.course;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::usv_msgs::SpeedCourse_<ContainerAllocator1> & lhs, const ::usv_msgs::SpeedCourse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace usv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::usv_msgs::SpeedCourse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::usv_msgs::SpeedCourse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::usv_msgs::SpeedCourse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::usv_msgs::SpeedCourse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usv_msgs::SpeedCourse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usv_msgs::SpeedCourse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::usv_msgs::SpeedCourse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ae1367da119f48c1bc62eecb750d210";
  }

  static const char* value(const ::usv_msgs::SpeedCourse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ae1367da119f48cULL;
  static const uint64_t static_value2 = 0x1bc62eecb750d210ULL;
};

template<class ContainerAllocator>
struct DataType< ::usv_msgs::SpeedCourse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "usv_msgs/SpeedCourse";
  }

  static const char* value(const ::usv_msgs::SpeedCourse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::usv_msgs::SpeedCourse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 speed   # Desired surge speed  [m/s]\n"
"float64 course  # Desired course angle [rad]\n"
;
  }

  static const char* value(const ::usv_msgs::SpeedCourse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::usv_msgs::SpeedCourse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.course);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedCourse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::usv_msgs::SpeedCourse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::usv_msgs::SpeedCourse_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "course: ";
    Printer<double>::stream(s, indent + "  ", v.course);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USV_MSGS_MESSAGE_SPEEDCOURSE_H
